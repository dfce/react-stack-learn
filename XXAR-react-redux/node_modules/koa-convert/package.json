{
  "_args": [
    [
      {
        "raw": "koa-convert@^1.2.0",
        "scope": null,
        "escapedName": "koa-convert",
        "name": "koa-convert",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "E:\\Git\\code-dev\\react-stack-learn\\XXAR-react-redux\\node_modules\\koa2"
    ]
  ],
  "_cnpm_publish_time": 1447701265277,
  "_from": "koa-convert@^1.2.0",
  "_hasShrinkwrap": false,
  "_id": "koa-convert@1.2.0",
  "_location": "/koa-convert",
  "_nodeVersion": "5.0.0",
  "_npmUser": {
    "name": "gyson",
    "email": "eilian.yunsong@gmail.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "koa-convert@^1.2.0",
    "scope": null,
    "escapedName": "koa-convert",
    "name": "koa-convert",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/koa2"
  ],
  "_resolved": "http://registry.npm.taobao.org/koa-convert/download/koa-convert-1.2.0.tgz",
  "_shasum": "da40875df49de0539098d1700b50820cebcd21d0",
  "_shrinkwrap": null,
  "_spec": "koa-convert@^1.2.0",
  "_where": "E:\\Git\\code-dev\\react-stack-learn\\XXAR-react-redux\\node_modules\\koa2",
  "author": {
    "name": "gyson",
    "email": "eilian.yunsong@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gyson/koa-convert/issues"
  },
  "dependencies": {
    "co": "^4.6.0",
    "koa-compose": "^3.0.0"
  },
  "description": "convert koa legacy generator-based middleware to promise-based middleware",
  "devDependencies": {
    "koa": "^2.0.0-alpha.2",
    "koa-v1": "^1.0.0",
    "mocha": "^2.3.3",
    "standard": "^5.3.1",
    "supertest": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "da40875df49de0539098d1700b50820cebcd21d0",
    "size": 3806,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/koa-convert/download/koa-convert-1.2.0.tgz"
  },
  "engines": {
    "node": ">= 4"
  },
  "gitHead": "da39a5291fb1d2bfa5f2406423091bbf185d2639",
  "homepage": "https://github.com/gyson/koa-convert#readme",
  "keywords": [
    "koa",
    "middleware",
    "convert"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "gyson",
      "email": "eilian.yunsong@gmail.com"
    }
  ],
  "name": "koa-convert",
  "optionalDependencies": {},
  "publish_time": 1447701265277,
  "readme": "\n# koa-convert\n\n[![npm version](https://img.shields.io/npm/v/koa-convert.svg)](https://npmjs.org/package/koa-convert)\n[![build status](https://travis-ci.org/gyson/koa-convert.svg)](https://travis-ci.org/gyson/koa-convert)\n\nConvert koa legacy ( 0.x & 1.x ) generator middleware to modern promise middleware ( 2.x ).\n\nIt could also convert modern promise middleware back to legacy generator middleware ( useful to help modern middleware support koa 0.x or 1.x ).\n\n## Note\n\nIt should be able to convert any legacy generator middleware to modern promise middleware ( or convert it back ).\n\nPlease let me know ( send a issue ) if you fail to do so.\n\n## Installation\n\n```\n$ npm install koa-convert\n```\n\n## Usage\n\n```js\nconst Koa = require('koa') // koa v2.x\nconst convert = require('koa-convert')\nconst app = new Koa()\n\napp.use(modernMiddleware)\n\napp.use(convert(legacyMiddleware))\n\napp.use(convert.compose(legacyMiddleware, modernMiddleware))\n\nfunction * legacyMiddleware (next) {\n  // before\n  yield next\n  // after\n}\n\nfunction modernMiddleware (ctx, next) {\n  // before\n  return next().then(() => {\n    // after\n  })\n}\n```\n\n## Distinguish legacy and modern middleware\n\nIn koa 0.x and 1.x ( without experimental flag ), `app.use` has an assertion that all ( legacy ) middleware must be generator function and it's tested with `fn.constructor.name == 'GeneratorFunction'` at [here](https://github.com/koajs/koa/blob/7fe29d92f1e826d9ce36029e1b9263b94cba8a7c/lib/application.js#L105).\n\nTherefore, we can distinguish legacy and modern middleware with `fn.constructor.name == 'GeneratorFunction'`.\n\n## Migration\n\n`app.use(legacyMiddleware)` is everywhere in 0.x and 1.x and it would be painful to manually change all of them to `app.use(convert(legacyMiddleware))`.\n\nYou can use following snippet to make migration easier.\n\n```js\nconst _use = app.use\napp.use = x => _use.call(app, convert(x))\n```\n\nThe above snippet will override `app.use` method and implicitly convert all legacy generator middleware to modern promise middleware.\n\nTherefore, you can have both `app.use(modernMiddleware)` and `app.use(legacyMiddleware)` and your 0.x or 1.x should work without modification.\n\nComplete example:\n\n```js\nconst Koa = require('koa') // v2.x\nconst convert = require('koa-convert')\nconst app = new Koa()\n\n// ---------- override app.use method ----------\n\nconst _use = app.use\napp.use = x => _use.call(app, convert(x))\n\n// ---------- end ----------\n\napp.use(modernMiddleware)\n\n// this will be converted to modern promise middleware implicitly\napp.use(legacyMiddleware)\n\nfunction * legacyMiddleware (next) {\n  // before\n  yield next\n  // after\n}\n\nfunction modernMiddleware (ctx, next) {\n  // before\n  return next().then(() => {\n    // after\n  })\n}\n```\n\n## API\n\n#### `convert()`\n\nConvert legacy generator middleware to modern promise middleware.\n\n```js\nmodernMiddleware = convert(legacyMiddleware)\n```\n\n#### `convert.compose()`\n\nConvert and compose multiple middleware (could mix legacy and modern ones) and return modern promise middleware.\n\n```js\ncomposedModernMiddleware = convert.compose(legacyMiddleware, modernMiddleware)\n// or\ncomposedModernMiddleware = convert.compose([legacyMiddleware, modernMiddleware])\n```\n\n#### `convert.back()`\n\nConvert modern promise middleware back to legacy generator middleware.\n\nThis is useful to help modern promise middleware support koa 0.x or 1.x.\n\n```js\nlegacyMiddleware = convert.back(modernMiddleware)\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gyson/koa-convert.git"
  },
  "scripts": {
    "test": "standard && mocha test.js"
  },
  "version": "1.2.0"
}

{
  "_args": [
    [
      {
        "raw": "to-regex@^3.0.1",
        "scope": null,
        "escapedName": "to-regex",
        "name": "to-regex",
        "rawSpec": "^3.0.1",
        "spec": ">=3.0.1 <4.0.0",
        "type": "range"
      },
      "E:\\Git\\code-dev\\react-stack-learn\\react-redux-xxar\\node_modules\\webpack-dev-server\\node_modules\\micromatch"
    ]
  ],
  "_cnpm_publish_time": 1476670517419,
  "_from": "to-regex@^3.0.1",
  "_hasShrinkwrap": false,
  "_id": "to-regex@3.0.1",
  "_location": "/to-regex",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/to-regex-3.0.1.tgz_1476670515755_0.6239306144416332"
  },
  "_npmUser": {
    "name": "jonschlinkert",
    "email": "github@sellside.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {
    "is-buffer": "1.1.6"
  },
  "_requested": {
    "raw": "to-regex@^3.0.1",
    "scope": null,
    "escapedName": "to-regex",
    "name": "to-regex",
    "rawSpec": "^3.0.1",
    "spec": ">=3.0.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/nanomatch",
    "/webpack-dev-server/braces",
    "/webpack-dev-server/expand-brackets",
    "/webpack-dev-server/extglob",
    "/webpack-dev-server/micromatch"
  ],
  "_resolved": "http://registry.npm.taobao.org/to-regex/download/to-regex-3.0.1.tgz",
  "_shasum": "15358bee4a2c83bd76377ba1dc049d0f18837aae",
  "_shrinkwrap": null,
  "_spec": "to-regex@^3.0.1",
  "_where": "E:\\Git\\code-dev\\react-stack-learn\\react-redux-xxar\\node_modules\\webpack-dev-server\\node_modules\\micromatch",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/to-regex/issues"
  },
  "dependencies": {
    "define-property": "^0.2.5",
    "extend-shallow": "^2.0.1",
    "regex-not": "^1.0.0"
  },
  "description": "Generate a regex from a string or array of strings.",
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-eslint": "^3.0.1",
    "gulp-format-md": "^0.1.10",
    "gulp-istanbul": "^1.1.1",
    "gulp-mocha": "^3.0.1",
    "mocha": "^3.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "15358bee4a2c83bd76377ba1dc049d0f18837aae",
    "size": 4280,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/to-regex/download/to-regex-3.0.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "5dda7b0b4b66902426b80055a4b39a9cd46efb70",
  "homepage": "https://github.com/jonschlinkert/to-regex",
  "keywords": [
    "match",
    "regex",
    "regular expression",
    "test",
    "to"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jonschlinkert",
      "email": "github@sellside.com"
    }
  ],
  "name": "to-regex",
  "optionalDependencies": {},
  "publish_time": 1476670517419,
  "readme": "# to-regex [![NPM version](https://img.shields.io/npm/v/to-regex.svg?style=flat)](https://www.npmjs.com/package/to-regex) [![NPM downloads](https://img.shields.io/npm/dm/to-regex.svg?style=flat)](https://npmjs.org/package/to-regex) [![Build Status](https://img.shields.io/travis/jonschlinkert/to-regex.svg?style=flat)](https://travis-ci.org/jonschlinkert/to-regex)\n\n> Generate a regex from a string or array of strings.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Options](#options)\n  * [options.contains](#optionscontains)\n  * [options.negate](#optionsnegate)\n  * [options.nocase](#optionsnocase)\n  * [options.flags](#optionsflags)\n  * [options.cache](#optionscache)\n- [About](#about)\n  * [Related projects](#related-projects)\n  * [Contributing](#contributing)\n  * [Building docs](#building-docs)\n  * [Running tests](#running-tests)\n  * [Author](#author)\n  * [License](#license)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save to-regex\n```\n\n## Usage\n\n```js\nvar toRegex = require('to-regex');\n\nconsole.log(toRegex('foo'));\n//=> /^(?:foo)$/\n\nconsole.log(toRegex('foo', {negate: true}));\n//=> /^(?:(?:(?!^(?:foo)$).)*)$/\n\nconsole.log(toRegex('foo', {contains: true}));\n//=> /(?:foo)/\n\nconsole.log(toRegex(['foo', 'bar'], {negate: true}));\n//=> /^(?:(?:(?!^(?:(?:foo)|(?:bar))$).)*)$/\n\nconsole.log(toRegex(['foo', 'bar'], {negate: true, contains: true}));\n//=> /^(?:(?:(?!(?:(?:foo)|(?:bar))).)*)$/\n```\n\n## Options\n\n### options.contains\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nGenerate a regex that will match any string that _contains_ the given pattern. By default, regex is strict will only return true for exact matches.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {contains: true}));\n//=> /(?:foo)/\n```\n\n### options.negate\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nCreate a regex that will match everything except the given pattern.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {negate: true}));\n//=> /^(?:(?:(?!^(?:foo)$).)*)$/\n```\n\n### options.nocase\n\n**Type**: `Boolean`\n\n**Default**: `undefined`\n\nAdds the `i` flag, to enable case-insensitive matching.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {nocase: true}));\n//=> /^(?:foo)$/i\n```\n\nAlternatively you can pass the flags you want directly on [options.flags](#options.flags).\n\n### options.flags\n\n**Type**: `String`\n\n**Default**: `undefined`\n\nDefine the flags you want to use on the generated regex.\n\n```js\nvar toRegex = require('to-regex');\nconsole.log(toRegex('foo', {flags: 'gm'}));\n//=> /^(?:foo)$/gm\nconsole.log(toRegex('foo', {flags: 'gmi', nocase: true})); //<= handles redundancy\n//=> /^(?:foo)$/gmi\n```\n\n### options.cache\n\n**Type**: `Boolean`\n\n**Default**: `true`\n\nGenerated regex is cached based on the provided string and options. As a result, runtime compilation only happens once per pattern (as long as options are also the same), which can result in dramatic speed improvements.\n\nThis also helps with debugging, since adding options and pattern are added to the generated regex.\n\n**Disable caching**\n\n```js\ntoRegex('foo', {cache: false});\n```\n\n## About\n\n### Related projects\n\n* [has-glob](https://www.npmjs.com/package/has-glob): Returns `true` if an array has a glob pattern. | [homepage](https://github.com/jonschlinkert/has-glob \"Returns `true` if an array has a glob pattern.\")\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob pattern… [more](https://github.com/jonschlinkert/is-glob) | [homepage](https://github.com/jonschlinkert/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [path-regex](https://www.npmjs.com/package/path-regex): Regular expression for matching the parts of a file path. | [homepage](https://github.com/regexps/path-regex \"Regular expression for matching the parts of a file path.\")\n* [to-regex-range](https://www.npmjs.com/package/to-regex-range): Returns a regex-compatible range from two numbers, min and max, with 855,412 generated unit tests… [more](https://github.com/jonschlinkert/to-regex-range) | [homepage](https://github.com/jonschlinkert/to-regex-range \"Returns a regex-compatible range from two numbers, min and max, with 855,412 generated unit tests to validate it's accuracy! Useful for creating regular expressions to validate numbers, ranges, years, etc. Returns a string, allowing the returned value to \")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This document was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\n\nTo generate the readme and API documentation with [verb](https://github.com/verbose/verb):\n\n```sh\n$ npm install -g verb verb-generate-readme && verb\n```\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm install -d && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT license](https://github.com/jonschlinkert/to-regex/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.1.31, on October 16, 2016._",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonschlinkert/to-regex.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "verb": {
    "toc": {
      "method": "preWrite"
    },
    "layout": "default",
    "tasks": [
      "readme"
    ],
    "plugins": [
      "gulp-format-md"
    ],
    "related": {
      "list": [
        "has-glob",
        "is-glob",
        "path-regex",
        "to-regex-range"
      ]
    },
    "reflinks": [
      "verb",
      "verb-generate-readme"
    ],
    "lint": {
      "reflinks": true
    }
  },
  "version": "3.0.1"
}
